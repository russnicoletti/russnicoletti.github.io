initSidebarItems({"struct":[["RegexSet","Match multiple (possibly overlapping) regular expressions in a single scan.A regex set corresponds to the union of two or more regular expressions. That is, a regex set will match text where at least one of its constituent regular expressions matches. A regex set as its formulated here provides a touch more power: it will also report *which* regular expressions in the set match. Indeed, this is the key difference between regex sets and a single `Regex` with many alternates, since only one alternate can match at a time.For example, consider regular expressions to match email addresses and domains: `[a-z]+@[a-z]+.(com|org|net)` and `[a-z]+.(com|org|net)`. If a regex set is constructed from those regexes, then searching the text `foo@example.com` will report both regexes as matching. Of course, one could accomplish this by compiling each regex on its own and doing two searches over the text. The key advantage of using a regex set is that it will report the matching regexes using a *single pass through the text*. If one has hundreds or thousands of regexes to match repeatedly (like a URL router for a complex web application or a user agent matcher), then a regex set can realize huge performance gains.ExampleThis shows how the above two regexes (for matching email addresses and domains) might work:Note that it would be possible to adapt the above example to using `Regex` with an expression like:After a match, one could then inspect the capture groups to figure out which alternates matched. The problem is that it is hard to make this approach scale when there are many regexes since the overlap between each alternate isn't always obvious to reason about.LimitationsRegex sets are limited to answering the following two questions:Does any regex in the set match? If so, which regexes in the set match? As with the main `Regex` type, it is cheaper to ask (1) instead of (2) since the matching engines can stop after the first match is found.Other features like finding the location of successive matches or their sub-captures aren't supported. If you need this functionality, the recommended approach is to compile each regex in the set independently and selectively match them based on which regexes in the set matched.PerformanceA `RegexSet` has the same performance characteristics as `Regex`. Namely, search takes `O(mn)` time, where `m` is proportional to the size of the regex set and `n` is proportional to the length of the search text."],["RegexSetBytes","Match multiple (possibly overlapping) regular expressions in a single scan.A regex set corresponds to the union of two or more regular expressions. That is, a regex set will match text where at least one of its constituent regular expressions matches. A regex set as its formulated here provides a touch more power: it will also report *which* regular expressions in the set match. Indeed, this is the key difference between regex sets and a single `Regex` with many alternates, since only one alternate can match at a time.For example, consider regular expressions to match email addresses and domains: `[a-z]+@[a-z]+.(com|org|net)` and `[a-z]+.(com|org|net)`. If a regex set is constructed from those regexes, then searching the text `foo@example.com` will report both regexes as matching. Of course, one could accomplish this by compiling each regex on its own and doing two searches over the text. The key advantage of using a regex set is that it will report the matching regexes using a *single pass through the text*. If one has hundreds or thousands of regexes to match repeatedly (like a URL router for a complex web application or a user agent matcher), then a regex set can realize huge performance gains.ExampleThis shows how the above two regexes (for matching email addresses and domains) might work:Note that it would be possible to adapt the above example to using `Regex` with an expression like:After a match, one could then inspect the capture groups to figure out which alternates matched. The problem is that it is hard to make this approach scale when there are many regexes since the overlap between each alternate isn't always obvious to reason about.LimitationsRegex sets are limited to answering the following two questions:Does any regex in the set match? If so, which regexes in the set match? As with the main `Regex` type, it is cheaper to ask (1) instead of (2) since the matching engines can stop after the first match is found.Other features like finding the location of successive matches or their sub-captures aren't supported. If you need this functionality, the recommended approach is to compile each regex in the set independently and selectively match them based on which regexes in the set matched.PerformanceA `RegexSet` has the same performance characteristics as `Regex`. Namely, search takes `O(mn)` time, where `m` is proportional to the size of the regex set and `n` is proportional to the length of the search text."],["SetMatches","A set of matches returned by a regex set."],["SetMatchesBytes","A set of matches returned by a regex set."],["SetMatchesIntoIter","An owned iterator over the set of matches from a regex set."],["SetMatchesIntoIterBytes","An owned iterator over the set of matches from a regex set."],["SetMatchesIter","A borrowed iterator over the set of matches from a regex set.The lifetime `'a` refers to the lifetime of a `SetMatches` value."],["SetMatchesIterBytes","A borrowed iterator over the set of matches from a regex set.The lifetime `'a` refers to the lifetime of a `SetMatches` value."]]});