initSidebarItems({"fn":[["write_preface","Writes the client preface to the underlying HTTP/2 connection.According to the HTTP/2 spec, a client preface is first a specific sequence of octets, followed by a settings frame.ReturnsAny error raised by the underlying connection is propagated."]],"struct":[["CleartextConnectError","A newtype wrapping the `io::Error`, as it occurs when attempting to establish an HTTP/2 connection over cleartext TCP (with prior knowledge)."],["CleartextConnector","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2 connection. Defaults to using port 80.It assumes that the connection is based on prior knowledge of the server's support for HTTP/2.More information in the spec"],["ClientConnection","The struct extends the `HttpConnection` API with client-specific methods (such as `start_request`) and wires the `HttpConnection` to the client `Session` callbacks."],["ClientSession","An implementation of the `Session` trait specific to handling client HTTP/2 connections.While handling the events signaled by the `HttpConnection`, the struct will modify the given session state appropriately.The purpose of the type is to make it easier for client implementations to only handle stream-level events by providing a `Stream` implementation, instead of having to implement all session management callbacks.For example, by varying the `Stream` implementation it is easy to implement a client that streams responses directly into a file on the local file system, instead of keeping it in memory (like the `DefaultStream` does), without having to change any HTTP/2-specific logic."],["ClientStream","A convenience wrapper type that represents an established client network transport stream. It wraps the stream itself, the scheme of the protocol to be used, and the remote host name."],["RequestStream","A struct representing a request stream. It provides the headers that are to be sent when initiating the request, as well as a `Stream` instance that handles the received response and provides the request body."]],"trait":[["HttpConnect","A trait that can be implemented by structs that want to provide the functionality of establishing network connections for use by HTTP/2 connections.The `ClientStream` instance returned from the `connect` method needs to contain the `TransportStream` that can be used by an HTTP/2 connection, along with the appropriate scheme (depending on how the connection was established), and the remote host name.The transport stream needs to have already been initialized by writing the client preface. The helper function `write_preface` can be used for this purpose."],["HttpConnectError","A marker trait for errors raised by attempting to establish an HTTP/2 connection."]]});