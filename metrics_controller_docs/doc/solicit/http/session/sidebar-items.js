initSidebarItems({"enum":[["StreamDataChunk","The enum represents the successful completion of the `Stream::get_data_chunk` method."],["StreamDataError","The enum represents errors that can be returned from the `Stream::get_data_chunk` method."],["StreamState","The enum represents all the states that an HTTP/2 stream can be found in.Corresponds to section 5.1. of the spec."]],"struct":[["DefaultSessionState","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`, mapping the stream ID to the concrete `Stream` instance."],["DefaultStream","An implementation of the `Stream` trait that saves all headers and data in memory.Stores its outgoing data as a `Vec<u8>`."],["StreamIter","A newtype for an iterator over `Stream`s saved in a `SessionState`.Allows `SessionState` implementations to return iterators over its session without being forced to declare them as associated types."]],"trait":[["Session","A trait that defines the interface between an `HttpConnection` and the higher-levels that use it. Essentially, it allows the `HttpConnection` to pass information onto those higher levels through a well-defined interface.These methods are effectively a set of callbacks that the `HttpConnection` invokes when the corresponding events arise on the HTTP/2 connection (i.e. frame stream).TODO Allow the session to influence the `HttpConnection` state and raise      errors (i.e. make the return type -> HttpResult<()>)."],["SessionState","A trait defining a set of methods for accessing and influencing an HTTP/2 session's state.This trait is tightly coupled to a `Stream`-based session layer implementation. Particular implementations are additionally tightly coupled to one particular `Stream` implementation.NoteClients built on top of the raw `HttpConnection` + `Session` can still exist without using this trait; however, it is included for convenience, as most session implementations *will* want to keep track of similar things in the session's state."],["Stream","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of streams.The trait defines which operations need to be implemented by a type that should be usable as an HTTP/2 stream. By implementing this trait, clients can implement only stream-level logic, such as how the received data should be handled, or which data should be sent to the peer, without having to worry about the lower-level details of session and connection management (e.g. handling raw frames or tracking stream status)."]]});